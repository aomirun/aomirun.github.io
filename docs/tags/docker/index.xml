<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>docker on Aomi</title>
    <link>https://aomi.run/tags/docker/</link>
    <description>Recent content in docker on Aomi</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh_CN</language>
    <copyright>aomi.run</copyright>
    <lastBuildDate>Thu, 04 Feb 2021 13:50:02 +0800</lastBuildDate><atom:link href="https://aomi.run/tags/docker/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>基于Wsl Ubuntu20.04上安装Kuberneters</title>
      <link>https://aomi.run/posts/micro/kind-k8s-ubuntu2004-wsl/</link>
      <pubDate>Thu, 04 Feb 2021 13:50:02 +0800</pubDate>
      
      <guid>https://aomi.run/posts/micro/kind-k8s-ubuntu2004-wsl/</guid>
      <description>前言 win10可谓windows系统对开发人员最友好的版本了,linux命令行加win的桌面系统,强强联合,正因为这个Linux子系统,让本地测试环境搭建与开发起飞. 下面就针对在wsl2下面的ubuntu20.04上面安装k8s开发环境做点说明. 创建本地k8s开发环境,主要是通过kind来实现
kind 安装 kind（Kubernetes IN Docker） 是一个基于 docker 构建 Kubernetes 集群的工具，非常适合用来在本地搭建基于 Kubernetes 的开发/测试环境。所以在安装kind前,最好把wsl,docker,国内镜像这些前置工作准备好. 通过 https://github.com/kubernetes-sigs/kind/releases/latest 获取最新的 release，根据自己的系统类型选择相应的系统 release，下载 release 之后重命名为 kind（Windows 系统 release 重命名为 kind.exe)，然后将其放在某一个目录下，并要确保这个目录在系统 PATH 中以方便的使用，可以放在 usr/bin 目录下（默认已经在系统 PATH 中），linux 系统中可能需要配置文件权限
$ sudo chmod +x kind or 需要本地有golang环境,并且GOPATH/bin在PATH中,如果不在,需要 export PATH=&amp;quot;$(go env GOPATH)/bin:${PATH}&amp;quot;
$ GO111MODULE=on go get sigs.k8s.io/kind@v0.10.0 拉取镜像 kindest/node 最新的 v0.20.2/v0.19.7 我测试时有bug,后来测试到v.19.1是正常的,所以这里我就采用了v1.19.1
$ docker pull kindest/node:v1.19.1 操作 Kuberneters 集群 使用 kind 创建 Kubernetes 集群非常的方便，只需要一行命令即可
$ kind create cluster #这里默认是使用kind的默认最新版本,我测试新版本有问题,故我测试的时候指定了下面的版本 or 特定版本</description>
    </item>
    
    <item>
      <title>实现收到IBMMQ的数据之后存储到数据库(微服务系列第五天)</title>
      <link>https://aomi.run/posts/java/hello-java-5-day/</link>
      <pubDate>Mon, 01 Feb 2021 18:14:10 +0800</pubDate>
      
      <guid>https://aomi.run/posts/java/hello-java-5-day/</guid>
      <description>前言 今天的目标是： 实现收到MQ队列消息，实现收到IBMMQ的数据之后存储到数据库。
 注意!!! 这是个学习使用mybatis的示例工程,正式项目则不应该如此做,耦合很严重.正确的做法是把消息发送到topic上面,由存储服务去topic上面取数据再做保存,这样就可以解耦了.
 修改mqserver项目 pom.xml 添加依赖 此处用的是阿里的连接池 druid
&amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.mybatis.spring.boot&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;mybatis-spring-boot-starter&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;2.1.4&amp;lt;/version&amp;gt; &amp;lt;/dependency&amp;gt; &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;mysql&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;mysql-connector-java&amp;lt;/artifactId&amp;gt; &amp;lt;scope&amp;gt;runtime&amp;lt;/scope&amp;gt; &amp;lt;/dependency&amp;gt; &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;com.alibaba&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;druid&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;1.2.4&amp;lt;/version&amp;gt; &amp;lt;/dependency&amp;gt; JDBC 配置 这个是从官网例子上拿来的配置数据
# 只有下面三个是必填项（使用内嵌数据库的话这三个也可以不用填，会使用默认配置），其他配置不是必须的 spring.datasource.url=jdbc:mysql://172.25.0.2:3306/db1 spring.datasource.username=root spring.datasource.password=123456 # driver-class-name 非必填可根据url推断 spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver # Druid 数据源配置，继承spring.datasource.* 配置，相同则覆盖 spring.datasource.initial-size=2 spring.datasource.max-active=30 spring.datasource.min-idle=2 spring.datasource.max-wait=1234 spring.datasource.pool-prepared-statements=true spring.datasource.max-pool-prepared-statement-per-connection-size=5 # spring.datasource.max-open-prepared-statements= #等价于上面的max-pool-prepared-statement-per-connection-size spring.datasource.validation-query=select 1 spring.datasource.validation-query-timeout=1 spring.datasource.test-on-borrow=true spring.datasource.test-on-return=true spring.datasource.test-while-idle=true spring.datasource.time-between-eviction-runs-millis=10000 spring.datasource.min-evictable-idle-time-millis=30001 spring.datasource.async-close-connection-enable=true # spring.datasource.aop-patterns=com.alibaba.spring.boot.demo.service.* # 自定义StatFilter 配置 其他 Filter 不再演示 spring.datasource.filter.stat.db-type=h2 spring.</description>
    </item>
    
    <item>
      <title>实现java的rsa加解密与签名并调用RPC微服务(微服务系列第四天)</title>
      <link>https://aomi.run/posts/java/hello-java-4-day/</link>
      <pubDate>Sun, 31 Jan 2021 15:40:31 +0800</pubDate>
      
      <guid>https://aomi.run/posts/java/hello-java-4-day/</guid>
      <description>前言  学习java的第4天 实现目标： 实现java的rsa加解密与签名并调用RPC微服务
 实现RSA工具类 由于刚开始学习，本过程是边网上抄作业，边理解。
JDK1.8 的 base64 src/main/java/com/example/rsaserver/utils/JavaBase64Util.java
public class JavaBase64Util { public static final String UTF_8 = &amp;#34;UTF-8&amp;#34;; public static Base64.Encoder encoder; public static Base64.Encoder urlEncoder; public static Base64.Decoder decoder; public static Base64.Decoder urlDecoder; static { encoder = Base64.getEncoder(); urlEncoder = Base64.getUrlEncoder(); decoder = Base64.getDecoder(); urlDecoder = Base64.getUrlDecoder(); } /** * encode * @param bytes * @return byte[] */ public static byte[] encode(final byte[] bytes) { return encoder.</description>
    </item>
    
    <item>
      <title>实现客户端同步和异步调用RPC微服务(微服务系列第三天)</title>
      <link>https://aomi.run/posts/java/hello-java-3-day/</link>
      <pubDate>Thu, 28 Jan 2021 18:16:06 +0800</pubDate>
      
      <guid>https://aomi.run/posts/java/hello-java-3-day/</guid>
      <description>前言  学习java的第3天 实现目标： 学习tars 客户端同步和异步调用RPC服务
 前面搞了那么多环境，主要还是为了折腾多语言微服务开发架构，这样就不用只限定某一种开发语言了，各种语言谁行谁上。今天主要目的就是把前面做的服务端程序，使用客户端来调用。
客户端同步/单向/异步调用服务 构建客户端工程项目,提供WEB代理服务 创建方法有很多种，具体不多说了，自行创建maven项目
添加依赖 &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;com.tencent.tars&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;tars-client&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;1.7.2&amp;lt;/version&amp;gt; &amp;lt;type&amp;gt;jar&amp;lt;/type&amp;gt; &amp;lt;/dependency&amp;gt; &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;com.tencent.tars&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;tars-spring-boot-starter&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;1.7.2&amp;lt;/version&amp;gt; &amp;lt;/dependency&amp;gt; 添加插件 &amp;lt;build&amp;gt; &amp;lt;finalName&amp;gt;mqwebservice&amp;lt;/finalName&amp;gt; &amp;lt;plugins&amp;gt; &amp;lt;plugin&amp;gt; &amp;lt;groupId&amp;gt;org.springframework.boot&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;spring-boot-maven-plugin&amp;lt;/artifactId&amp;gt; &amp;lt;/plugin&amp;gt; &amp;lt;!--tars2java plugin --&amp;gt; &amp;lt;plugin&amp;gt; &amp;lt;groupId&amp;gt;com.tencent.tars&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;tars-maven-plugin&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;1.7.2&amp;lt;/version&amp;gt; &amp;lt;configuration&amp;gt; &amp;lt;tars2JavaConfig&amp;gt; &amp;lt;!-- tars文件位置 --&amp;gt; &amp;lt;tarsFiles&amp;gt; &amp;lt;tarsFile&amp;gt;${basedir}/src/main/resources/mqserver.tars&amp;lt;/tarsFile&amp;gt; &amp;lt;/tarsFiles&amp;gt; &amp;lt;!-- 源文件编码 --&amp;gt; &amp;lt;tarsFileCharset&amp;gt;UTF-8&amp;lt;/tarsFileCharset&amp;gt; &amp;lt;!-- 生成代码，PS：客户端调用，这里需要设置为false --&amp;gt; &amp;lt;servant&amp;gt;false&amp;lt;/servant&amp;gt; &amp;lt;!-- 生成源代码编码 --&amp;gt; &amp;lt;charset&amp;gt;UTF-8&amp;lt;/charset&amp;gt; &amp;lt;!-- 生成的源代码目录 --&amp;gt; &amp;lt;srcPath&amp;gt;${basedir}/src/main/java&amp;lt;/srcPath&amp;gt; &amp;lt;!-- 生成源代码包前缀 --&amp;gt; &amp;lt;packagePrefixName&amp;gt;com.example.mqwebservice.service.&amp;lt;/packagePrefixName&amp;gt; &amp;lt;/tars2JavaConfig&amp;gt; &amp;lt;/configuration&amp;gt; &amp;lt;/plugin&amp;gt; &amp;lt;!--package plugin--&amp;gt; &amp;lt;/plugins&amp;gt; &amp;lt;/build&amp;gt; 注解main @SpringBootApplication @EnableTarsServer public class MqwebserviceApplication { public static void main(String[] args) { SpringApplication.</description>
    </item>
    
    <item>
      <title>实现tars-springboot-ibm-mq的微服务(微服务系列第二天)</title>
      <link>https://aomi.run/posts/java/hello-java-2-day/</link>
      <pubDate>Wed, 27 Jan 2021 12:37:57 +0800</pubDate>
      
      <guid>https://aomi.run/posts/java/hello-java-2-day/</guid>
      <description>前言  学习JAVA第2天 目标实现： 基于tars springboot ibm mq的微服务
 第1天学习了java的项目创建，打包，上传到tars中，收获良多，今天折腾一下项目中需要用到的IBM MQ消息服务,于是就实现了基于tars springboot ibm mq的微服务.
搭建IBM MQ 同样还是使用docker来创建，添加ibmmq
$ docker volume create qm1data # ibm mq 有些权限要求，配置不当有可能启动不了，所以使用卷的方式比较简单 docker-compose.yml 中添加内容如下：
ibmmq:image:ibmcom/mqcontainer_name:ibmmqvolumes:- qm1data:/mnt/mqmenvironment:LICENSE:&amp;#34;accept&amp;#34;MQ_QMGR_NAME:&amp;#34;QM1&amp;#34;MQ_APP_PASSWORD:&amp;#34;abcd1234&amp;#34;ports:- &amp;#34;1414:1414&amp;#34;- &amp;#34;9443:9443&amp;#34;networks:tars:ipv4_address:172.25.0.201volumes:qm1data:另外给node一个web服务端口，后续会用上
node:# image: tarscloud/tars-node:stableimage:tarscloud/tars-node:latestcontainer_name:tars-node# restart: alwaysports:- &amp;#34;1080:1080&amp;#34;networks:tars:ipv4_address:172.25.0.5volumes:- ./node/data:/data/tars:rw- /etc/localtime:/etc/localtimeenvironment:INET:eth0WEB_HOST:http://172.25.0.3:3000depends_on:- framework运行起来
$ docker-compose up -d Creating tars-mysql ... done Creating ibmmq ... done Creating tars-framework ... done Creating tars-node ... done 打开浏览器访问一下，并做相应的配置 https://localhost:9443 重要！！！ 9443是SSL端口，一定需要使用https来访问,好像ibmmq这个版本的web服务有bug,重启Docker后，会占用端口，之后就启动不了了，原因没有深究，测试的话，默认创建好后就可以使用，要不要Web管理端都无所谓。
IBM MQ登录页 输入账号密码登录，默认账号密码是： admin/passw0rd
IBM MQ登录后的欢迎页 版本信息 新版本的IBM MQ的界面还是很漂亮的</description>
    </item>
    
    <item>
      <title>通过docker-springboot-tars构建微服务环境(微服务系列第一天)</title>
      <link>https://aomi.run/posts/java/hello-java-1-day/</link>
      <pubDate>Tue, 26 Jan 2021 11:39:02 +0800</pubDate>
      
      <guid>https://aomi.run/posts/java/hello-java-1-day/</guid>
      <description>前言  学习JAVA第1天,实现目标：通过docker整合springboot和tars
 先花了些时间折腾了一下Java的开发环境，平常主要用vscode做开发，就在VScode上弄了一套Java的开发环境，基于win10 wsl2 vscode 的，具体环境折腾可以看我那篇环境搭建的文章。然后花了几个小时时间学习一下Java的基本语法，有哪些保留字，变量的作用域。包、接口、类还有继承关系，和其它语言参照学习一下。打算使用Java做一些项目的补充，则需要多语言混合开发，我选了较熟的Tars来做。Tars原生支持SpringBoot，OK开始折腾。
tars 环境搭建 为了快速开始，我使用Docker来搭建开发环境,Docker的安装及使用搜索网络文章介绍即可。
创建 Docker 网络 $ docker network create -d bridge --subnet=172.25.0.0/16 --gateway=172.25.0.1 tars 创建 docker 目录 $ mkdir ~/docker-app/tars/framework/data -p $ mkdir ~/docker-app/tars/framework-slave/data -p $ mkdir ~/docker-app/tars/node/data -p $ mkdir ~/docker-app/tars/mysql/data -p $ mkdir ~/docker-app/tars/mysql/conf -p 创建 ~/docker-app/tars/mysql/conf/my.cnf 文件 [mysqld] user=root default-storage-engine=INNODB character-set-server=utf8 [client] default-character-set=utf8 [mysql] default-character-set=utf8 创建 ~/docker-app/tars/docker-compose.yml 文件 version:&amp;#34;3&amp;#34;services:mysql:image:mysql:5.6container_name:tars-mysqlports:- &amp;#34;3307:3306&amp;#34;# restart: alwaysprivileged:trueenvironment:MYSQL_ROOT_PASSWORD:&amp;#34;123456&amp;#34;volumes:- ./mysql/data:/var/lib/mysql- ./mysql/conf/my.cnf:/etc/my.cnf- /etc/localtime:/etc/localtimenetworks:tars:ipv4_address:172.25.0.2framework:# image: tarscloud/framework:stableimage:tarscloud/framework:latestcontainer_name:tars-frameworkports:- &amp;#34;3000:3000&amp;#34;- &amp;#34;3001:3001&amp;#34;# restart: alwaysnetworks:tars:ipv4_address:172.</description>
    </item>
    
  </channel>
</rss>
