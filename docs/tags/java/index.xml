<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>java on Aomi</title>
    <link>https://aomi.run/tags/java/</link>
    <description>Recent content in java on Aomi</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh_CN</language>
    <copyright>aomi.run</copyright>
    <lastBuildDate>Sun, 31 Jan 2021 15:40:31 +0800</lastBuildDate>
    
	<atom:link href="https://aomi.run/tags/java/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>实现java的rsa加解密与签名并调用RPC微服务(微服务系列第四天)</title>
      <link>https://aomi.run/posts/java/hello-java-4-day/</link>
      <pubDate>Sun, 31 Jan 2021 15:40:31 +0800</pubDate>
      
      <guid>https://aomi.run/posts/java/hello-java-4-day/</guid>
      <description>前言  学习java的第4天 实现目标： 实现java的rsa加解密与签名并调用RPC微服务
 实现RSA工具类 由于刚开始学习，本过程是边网上抄作业，边理解。
JDK1.8 的 base64 src/main/java/com/example/rsaserver/utils/JavaBase64Util.java
public class JavaBase64Util { public static final String UTF_8 = &amp;#34;UTF-8&amp;#34;; public static Base64.Encoder encoder; public static Base64.Encoder urlEncoder; public static Base64.Decoder decoder; public static Base64.Decoder urlDecoder; static { encoder = Base64.getEncoder(); urlEncoder = Base64.getUrlEncoder(); decoder = Base64.getDecoder(); urlDecoder = Base64.getUrlDecoder(); } /** * encode * @param bytes * @return byte[] */ public static byte[] encode(final byte[] bytes) { return encoder.</description>
    </item>
    
    <item>
      <title>实现客户端同步和异步调用RPC微服务(微服务系列第三天)</title>
      <link>https://aomi.run/posts/java/hello-java-3-day/</link>
      <pubDate>Thu, 28 Jan 2021 18:16:06 +0800</pubDate>
      
      <guid>https://aomi.run/posts/java/hello-java-3-day/</guid>
      <description>前言  学习java的第3天 实现目标： 学习tars 客户端同步和异步调用RPC服务
 前面搞了那么多环境，主要还是为了折腾多语言微服务开发架构，这样就不用只限定某一种开发语言了，各种语言谁行谁上。今天主要目的就是把前面做的服务端程序，使用客户端来调用。
客户端同步/单向/异步调用服务 构建客户端工程项目,提供WEB代理服务 创建方法有很多种，具体不多说了，自行创建maven项目
添加依赖 &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;com.tencent.tars&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;tars-client&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;1.7.2&amp;lt;/version&amp;gt; &amp;lt;type&amp;gt;jar&amp;lt;/type&amp;gt; &amp;lt;/dependency&amp;gt; &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;com.tencent.tars&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;tars-spring-boot-starter&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;1.7.2&amp;lt;/version&amp;gt; &amp;lt;/dependency&amp;gt; 添加插件 &amp;lt;build&amp;gt; &amp;lt;finalName&amp;gt;mqwebservice&amp;lt;/finalName&amp;gt; &amp;lt;plugins&amp;gt; &amp;lt;plugin&amp;gt; &amp;lt;groupId&amp;gt;org.springframework.boot&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;spring-boot-maven-plugin&amp;lt;/artifactId&amp;gt; &amp;lt;/plugin&amp;gt; &amp;lt;!--tars2java plugin --&amp;gt; &amp;lt;plugin&amp;gt; &amp;lt;groupId&amp;gt;com.tencent.tars&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;tars-maven-plugin&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;1.7.2&amp;lt;/version&amp;gt; &amp;lt;configuration&amp;gt; &amp;lt;tars2JavaConfig&amp;gt; &amp;lt;!-- tars文件位置 --&amp;gt; &amp;lt;tarsFiles&amp;gt; &amp;lt;tarsFile&amp;gt;${basedir}/src/main/resources/mqserver.tars&amp;lt;/tarsFile&amp;gt; &amp;lt;/tarsFiles&amp;gt; &amp;lt;!-- 源文件编码 --&amp;gt; &amp;lt;tarsFileCharset&amp;gt;UTF-8&amp;lt;/tarsFileCharset&amp;gt; &amp;lt;!-- 生成代码，PS：客户端调用，这里需要设置为false --&amp;gt; &amp;lt;servant&amp;gt;false&amp;lt;/servant&amp;gt; &amp;lt;!-- 生成源代码编码 --&amp;gt; &amp;lt;charset&amp;gt;UTF-8&amp;lt;/charset&amp;gt; &amp;lt;!-- 生成的源代码目录 --&amp;gt; &amp;lt;srcPath&amp;gt;${basedir}/src/main/java&amp;lt;/srcPath&amp;gt; &amp;lt;!-- 生成源代码包前缀 --&amp;gt; &amp;lt;packagePrefixName&amp;gt;com.example.mqwebservice.service.&amp;lt;/packagePrefixName&amp;gt; &amp;lt;/tars2JavaConfig&amp;gt; &amp;lt;/configuration&amp;gt; &amp;lt;/plugin&amp;gt; &amp;lt;!--package plugin--&amp;gt; &amp;lt;/plugins&amp;gt; &amp;lt;/build&amp;gt; 注解main @SpringBootApplication @EnableTarsServer public class MqwebserviceApplication { public static void main(String[] args) { SpringApplication.</description>
    </item>
    
    <item>
      <title>实现tars-springboot-ibm-mq的微服务(微服务系列第二天)</title>
      <link>https://aomi.run/posts/java/hello-java-2-day/</link>
      <pubDate>Wed, 27 Jan 2021 12:37:57 +0800</pubDate>
      
      <guid>https://aomi.run/posts/java/hello-java-2-day/</guid>
      <description>前言  学习JAVA第2天 目标实现： 基于tars springboot ibm mq的微服务
 第1天学习了java的项目创建，打包，上传到tars中，收获良多，今天折腾一下项目中需要用到的IBM MQ消息服务,于是就实现了基于tars springboot ibm mq的微服务.
搭建IBM MQ 同样还是使用docker来创建，添加ibmmq
$ docker volume create qm1data # ibm mq 有些权限要求，配置不当有可能启动不了，所以使用卷的方式比较简单 docker-compose.yml 中添加内容如下：
ibmmq:image:ibmcom/mqcontainer_name:ibmmqvolumes:- qm1data:/mnt/mqmenvironment:LICENSE:&amp;#34;accept&amp;#34;MQ_QMGR_NAME:&amp;#34;QM1&amp;#34;MQ_APP_PASSWORD:&amp;#34;abcd1234&amp;#34;ports:- &amp;#34;1414:1414&amp;#34;- &amp;#34;9443:9443&amp;#34;networks:tars:ipv4_address:172.25.0.201volumes:qm1data:另外给node一个web服务端口，后续会用上
node:# image: tarscloud/tars-node:stableimage:tarscloud/tars-node:latestcontainer_name:tars-node# restart: alwaysports:- &amp;#34;1080:1080&amp;#34;networks:tars:ipv4_address:172.25.0.5volumes:- ./node/data:/data/tars:rw- /etc/localtime:/etc/localtimeenvironment:INET:eth0WEB_HOST:http://172.25.0.3:3000depends_on:- framework运行起来
$ docker-compose up -d Creating tars-mysql ... done Creating ibmmq ... done Creating tars-framework ... done Creating tars-node ... done 打开浏览器访问一下，并做相应的配置 https://localhost:9443 重要！！！ 9443是SSL端口，一定需要使用https来访问,好像ibmmq这个版本的web服务有bug,重启Docker后，会占用端口，之后就启动不了了，原因没有深究，测试的话，默认创建好后就可以使用，要不要Web管理端都无所谓。
IBM MQ登录页 输入账号密码登录，默认账号密码是： admin/passw0rd
IBM MQ登录后的欢迎页 版本信息 新版本的IBM MQ的界面还是很漂亮的</description>
    </item>
    
    <item>
      <title>通过docker-springboot-tars构建微服务环境(微服务系列第一天)</title>
      <link>https://aomi.run/posts/java/hello-java-1-day/</link>
      <pubDate>Tue, 26 Jan 2021 11:39:02 +0800</pubDate>
      
      <guid>https://aomi.run/posts/java/hello-java-1-day/</guid>
      <description>前言  学习JAVA第1天,实现目标：通过docker整合springboot和tars
 先花了些时间折腾了一下Java的开发环境，平常主要用vscode做开发，就在VScode上弄了一套Java的开发环境，基于win10 wsl2 vscode 的，具体环境折腾可以看我那篇环境搭建的文章。然后花了几个小时时间学习一下Java的基本语法，有哪些保留字，变量的作用域。包、接口、类还有继承关系，和其它语言参照学习一下。打算使用Java做一些项目的补充，则需要多语言混合开发，我选了较熟的Tars来做。Tars原生支持SpringBoot，OK开始折腾。
tars 环境搭建 为了快速开始，我使用Docker来搭建开发环境,Docker的安装及使用搜索网络文章介绍即可。
创建 Docker 网络 $ docker network create -d bridge --subnet=172.25.0.0/16 --gateway=172.25.0.1 tars 创建 docker 目录 $ mkdir ~/docker-app/tars/framework/data -p $ mkdir ~/docker-app/tars/framework-slave/data -p $ mkdir ~/docker-app/tars/node/data -p $ mkdir ~/docker-app/tars/mysql/data -p $ mkdir ~/docker-app/tars/mysql/conf -p 创建 ~/docker-app/tars/mysql/conf/my.cnf 文件 [mysqld] user=root default-storage-engine=INNODB character-set-server=utf8 [client] default-character-set=utf8 [mysql] default-character-set=utf8 创建 ~/docker-app/tars/docker-compose.yml 文件 version:&amp;#34;3&amp;#34;services:mysql:image:mysql:5.6container_name:tars-mysqlports:- &amp;#34;3307:3306&amp;#34;# restart: alwaysprivileged:trueenvironment:MYSQL_ROOT_PASSWORD:&amp;#34;123456&amp;#34;volumes:- ./mysql/data:/var/lib/mysql- ./mysql/conf/my.cnf:/etc/my.cnf- /etc/localtime:/etc/localtimenetworks:tars:ipv4_address:172.25.0.2framework:# image: tarscloud/framework:stableimage:tarscloud/framework:latestcontainer_name:tars-frameworkports:- &amp;#34;3000:3000&amp;#34;- &amp;#34;3001:3001&amp;#34;# restart: alwaysnetworks:tars:ipv4_address:172.</description>
    </item>
    
    <item>
      <title>Wsl2 Vscode Openjdk Install</title>
      <link>https://aomi.run/posts/wsl2-vscode-openjdk-install/</link>
      <pubDate>Mon, 25 Jan 2021 11:46:59 +0800</pubDate>
      
      <guid>https://aomi.run/posts/wsl2-vscode-openjdk-install/</guid>
      <description>准备 进入wsl命令行，先更新系统,更新慢的可以换apt源处理，换源自行搜索。
$ sudo apt update -y $ sudo apt upgrade -y 安装JDK $ sudo apt install openjdk-8-jdk -y $ java -version openjdk version &amp;#34;1.8.0_275&amp;#34; OpenJDK Runtime Environment (build 1.8.0_275-8u275-b01-0ubuntu1~20.04-b01) OpenJDK 64-Bit Server VM (build 25.275-b01, mixed mode) 再安装个 JDK 11
$ sudo apt install openjdk-11-jdk -y 安装maven 安装maven
$ sudo apt install maven -y $ mvn -v Apache Maven 3.6.3 Maven home: /usr/share/maven Java version: 1.8.0_275, vendor: Private Build, runtime: /usr/lib/jvm/java-8-openjdk-amd64/jre Default locale: en, platform encoding: UTF-8 OS name: &amp;#34;linux&amp;#34;, version: &amp;#34;4.</description>
    </item>
    
  </channel>
</rss>