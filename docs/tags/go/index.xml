<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>go on Aomi</title>
    <link>https://aomi.run/tags/go/</link>
    <description>Recent content in go on Aomi</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh_CN</language>
    <copyright>aomi.run</copyright>
    <lastBuildDate>Mon, 17 May 2021 00:07:31 +0800</lastBuildDate><atom:link href="https://aomi.run/tags/go/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>学习 servicecomb gochassis 第一天</title>
      <link>https://aomi.run/posts/servicecomb/go/first_day/</link>
      <pubDate>Mon, 17 May 2021 00:07:31 +0800</pubDate>
      
      <guid>https://aomi.run/posts/servicecomb/go/first_day/</guid>
      <description>学习 servicecomb gochassis 第一天 1. 本地安装 &amp;lt;服务中心 ServiceCenter&amp;gt; 我的学习笔计是基于Docker环境,使用Docker-compose来编排,各平台如何安装Docker和docker-compose可自行搜索学习.
创建 Docker 网络
$ docker network create -d bridge --subnet=172.27.0.0/16 --gateway=172.27.0.1 aomi 创建 docker-compose.yml 文件
version:&amp;#34;3&amp;#34;services:service-center:image:servicecomb/service-centercontainer_name:service-centerports:- &amp;#34;30100:30100&amp;#34;restart:alwaysvolumes:- /etc/localtime:/etc/localtimenetworks:aomi:ipv4_address:172.27.0.2service-frontend:image:servicecomb/scfrontendcontainer_name:service-frontendenvironment:SC_ADDRESS:&amp;#34;service-center&amp;#34;ports:- &amp;#34;30103:30103&amp;#34;restart:alwaysvolumes:- /etc/localtime:/etc/localtimenetworks:aomi:ipv4_address:172.27.0.3networks:aomi:external:true启动环境
$ docker-compose up -d 访问本地Web端口 http://127.0.0.1:30103 见到如下图,即安装成功 因之前做过测试,上面跑了两个测试服务,这个不影响.
创建项目 目录如下,项目可以去我的Github上面下载 https://github.com/aomirun/gochassis-start
$ tree . ├── Makefile ├── README.md ├── client │ ├── Dockerfile │ ├── conf │ │ ├── chassis.yaml │ │ └── microservice.yaml │ └── main.go ├── docker-compose.yml ├── go.mod ├── go.</description>
    </item>
    
    <item>
      <title>7天用Go从零实现Web框架</title>
      <link>https://aomi.run/posts/golang/realizing-web-framework-from-scratch-with-go-in-7-days/</link>
      <pubDate>Thu, 21 Jan 2021 17:35:50 +0800</pubDate>
      
      <guid>https://aomi.run/posts/golang/realizing-web-framework-from-scratch-with-go-in-7-days/</guid>
      <description>序言 在网上看到一个不错的教程，为了自己记录方便，转载一下。源站地址 极客兔兔
设计一个框架 大部分时候，我们需要实现一个 Web 应用，第一反应是应该使用哪个框架。不同的框架设计理念和提供的功能有很大的差别。比如 Python 语言的 django和flask，前者大而全，后者小而美。Go语言/golang 也是如此，新框架层出不穷，比如Beego，Gin，Iris等。那为什么不直接使用标准库，而必须使用框架呢？在设计一个框架之前，我们需要回答框架核心为我们解决了什么问题。只有理解了这一点，才能想明白我们需要在框架中实现什么功能。
我们先看看标准库net/http如何处理一个请求。
func main() { http.HandleFunc(&amp;#34;/&amp;#34;, handler) http.HandleFunc(&amp;#34;/count&amp;#34;, counter) log.Fatal(http.ListenAndServe(&amp;#34;localhost:8000&amp;#34;, nil)) } func handler(w http.ResponseWriter, r *http.Request) { fmt.Fprintf(w, &amp;#34;URL.Path = %qn&amp;#34;, r.URL.Path) } net/http提供了基础的Web功能，即监听端口，映射静态路由，解析HTTP报文。一些Web开发中简单的需求并不支持，需要手工实现。
 动态路由：例如hello/:name，hello/*这类的规则。 鉴权：没有分组/统一鉴权的能力，需要在每个路由映射的handler中实现。 模板：没有统一简化的HTML机制。 …  当我们离开框架，使用基础库时，需要频繁手工处理的地方，就是框架的价值所在。但并不是每一个频繁处理的地方都适合在框架中完成。Python有一个很著名的Web框架，名叫bottle，整个框架由bottle.py一个文件构成，共4400行，可以说是一个微框架。那么理解这个微框架提供的特性，可以帮助我们理解框架的核心能力。
 路由(Routing)：将请求映射到函数，支持动态路由。例如&#39;/hello/:name。 模板(Templates)：使用内置模板引擎提供模板渲染机制。 工具集(Utilites)：提供对 cookies，headers 等处理机制。 插件(Plugin)：Bottle本身功能有限，但提供了插件机制。可以选择安装到全局，也可以只针对某几个路由生效。 …  HTTP 基础 标准库启动Web服务 Go语言内置了 net/http库，封装了HTTP网络编程的基础的接口，我们实现的Gee Web 框架便是基于net/http的。我们接下来通过一个例子，简单介绍下这个库的使用。
package main import ( &amp;#34;fmt&amp;#34; &amp;#34;log&amp;#34; &amp;#34;net/http&amp;#34; ) func main() { http.HandleFunc(&amp;#34;/&amp;#34;, indexHandler) http.</description>
    </item>
    
  </channel>
</rss>
